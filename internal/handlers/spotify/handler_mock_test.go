// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../../handlers/spotify/handler_mock_test.go -package=spotify
//

// Package spotify is a generated GoMock package.
package spotify

import (
	context "context"
	reflect "reflect"

	spotify "github.com/sgitwhyd/music-catalogue/internal/models/spotify"
	spotify0 "github.com/sgitwhyd/music-catalogue/internal/repositorys/spotify"
	gomock "go.uber.org/mock/gomock"
)

// MockSpotifyRepository is a mock of SpotifyRepository interface.
type MockSpotifyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpotifyRepositoryMockRecorder
	isgomock struct{}
}

// MockSpotifyRepositoryMockRecorder is the mock recorder for MockSpotifyRepository.
type MockSpotifyRepositoryMockRecorder struct {
	mock *MockSpotifyRepository
}

// NewMockSpotifyRepository creates a new mock instance.
func NewMockSpotifyRepository(ctrl *gomock.Controller) *MockSpotifyRepository {
	mock := &MockSpotifyRepository{ctrl: ctrl}
	mock.recorder = &MockSpotifyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpotifyRepository) EXPECT() *MockSpotifyRepositoryMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockSpotifyRepository) Search(ctx context.Context, query string, limit, offset int) (*spotify0.SpotifySearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query, limit, offset)
	ret0, _ := ret[0].(*spotify0.SpotifySearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSpotifyRepositoryMockRecorder) Search(ctx, query, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSpotifyRepository)(nil).Search), ctx, query, limit, offset)
}

// MockSpotifyService is a mock of SpotifyService interface.
type MockSpotifyService struct {
	ctrl     *gomock.Controller
	recorder *MockSpotifyServiceMockRecorder
	isgomock struct{}
}

// MockSpotifyServiceMockRecorder is the mock recorder for MockSpotifyService.
type MockSpotifyServiceMockRecorder struct {
	mock *MockSpotifyService
}

// NewMockSpotifyService creates a new mock instance.
func NewMockSpotifyService(ctrl *gomock.Controller) *MockSpotifyService {
	mock := &MockSpotifyService{ctrl: ctrl}
	mock.recorder = &MockSpotifyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpotifyService) EXPECT() *MockSpotifyServiceMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockSpotifyService) Search(ctx context.Context, query string, pageSize, pageIndex int) (*spotify.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query, pageSize, pageIndex)
	ret0, _ := ret[0].(*spotify.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSpotifyServiceMockRecorder) Search(ctx, query, pageSize, pageIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSpotifyService)(nil).Search), ctx, query, pageSize, pageIndex)
}
