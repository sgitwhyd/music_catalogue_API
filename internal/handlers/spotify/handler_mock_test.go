// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../../handlers/spotify/handler_mock_test.go -package=spotify
//

// Package spotify is a generated GoMock package.
package spotify

import (
	context "context"
	reflect "reflect"

	spotify "github.com/sgitwhyd/music-catalogue/internal/models/spotify"
	gomock "go.uber.org/mock/gomock"
)

// MockSpotifyService is a mock of SpotifyService interface.
type MockSpotifyService struct {
	ctrl     *gomock.Controller
	recorder *MockSpotifyServiceMockRecorder
	isgomock struct{}
}

// MockSpotifyServiceMockRecorder is the mock recorder for MockSpotifyService.
type MockSpotifyServiceMockRecorder struct {
	mock *MockSpotifyService
}

// NewMockSpotifyService creates a new mock instance.
func NewMockSpotifyService(ctrl *gomock.Controller) *MockSpotifyService {
	mock := &MockSpotifyService{ctrl: ctrl}
	mock.recorder = &MockSpotifyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpotifyService) EXPECT() *MockSpotifyServiceMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockSpotifyService) Search(ctx context.Context, query string, pageSize, pageIndex int, userID uint) (*spotify.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query, pageSize, pageIndex, userID)
	ret0, _ := ret[0].(*spotify.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSpotifyServiceMockRecorder) Search(ctx, query, pageSize, pageIndex, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSpotifyService)(nil).Search), ctx, query, pageSize, pageIndex, userID)
}

// UpSertActivity mocks base method.
func (m *MockSpotifyService) UpSertActivity(ctx context.Context, userID uint, request spotify.TrackActivityRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpSertActivity", ctx, userID, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpSertActivity indicates an expected call of UpSertActivity.
func (mr *MockSpotifyServiceMockRecorder) UpSertActivity(ctx, userID, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpSertActivity", reflect.TypeOf((*MockSpotifyService)(nil).UpSertActivity), ctx, userID, request)
}
